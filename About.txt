Aşağıdaki komut ile ProductsAPI klasörü oluşturularak içinde webapi projesi oluşturulur.
dotnet new webapi -o ProductsAPI


--------------------------------------------------------------------------------------------------
Entity Framework'ü projeye eklemek için Program.cs olan klasöre terminali konumlandırıp aşağıdaki kodu çalıştır

dotnet add package Microsoft.EntityFrameworkCore.Sqlite


Bu komutun çalışmasından sonra projeadi.csproj dosyasında sqlite'in projeye kurulumunu gösteren kodun eklenmiş olduğunu göreceğiz



------------------------------------------------------------------------------------------------------------------------

Daha sonra Design paketini projeye yüklememiz lazım proje dizini içersine(Program.cs'nin olduğu klasör) bu komut ile :

dotnet add package Microsoft.EntityFrameworkCore.Design

------------------------------------------------------------------------------------------------------------------------

Ardından Program.cs içersine var builder = WebApplication.CreateBuilder(args); hemen sonra

builder.Services.AddDbContext<ProductsContext>(x => x.UseSqlite("Data Source = products.Db"));


-------------------------------------------------------------------------------------------------------------------
daha sonra kontrol etmek için 

dotnet build

komutu ile kontrol edilir
---------------------------------------------------------------------------------------------------------------------

dotnet ef migrations add InitialCreate

komutu ile yeni migrations oluştururuz. InitialCreate ismi keyfi


-------------------------------------------------------------------------------------------------------------------
Ef tools eski ise güncelleme yapılabilir
dotnet tool update --global dotnet-ef


---------------------------------------------------------------------------------------------------------------------------
Şimdi veritabanına aktarma zamanı. Bu kod ile migrations ile veritabaına aktarılır:

dotnet ef database update
---------------------------------------------------------------------------------------------------------------------------
Projeye Identity ekle(ProductsAPI.csproj dosyasına konumlandıktan sonra):

dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore


Komut çalıştırıldıktan sonra IdentityApp.csproj dosyasında Identity'nin eklendiğine dair satır görünür.

----------------------------------------------------------------------------------------------------------------------------

migrations için:

dotnet ef migrations add IdentityTables

ardından update:

dotnet ef database update

---------------------------------------------------------------------------------------------------------------------------
Token oluşturmak için yüklenecek paketler. www.nuget.org üzerinde jwt aratılır. Çıkanlar arasında:
1-System.IdentityModel.Tokens.Jwt
2-Microsoft.AspNetCore.Authentication.JwtBearer




1. için komut:
dotnet add package System.IdentityModel.Tokens.Jwt

2. için komut:
dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer


----------------------------------------------------------------------------------------------------------------------------------
"generate secret key" kelimelerini aratıp bir siteden secret key oluşturulur. Kendiniz de yazabilirsiniz. örnek:

https://generate.plus/en/hex/secret-key
----------------------------------------------------------------------------------------------------------------------------------
Oluşturulan token'ı encode edip görebiliriz. Mesela bu site üzerinden:

https://jwt.io/
----------------------------------------------------------------------------------------------------------------------------------








